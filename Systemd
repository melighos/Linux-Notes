systemd:
systemd is a suite of basic building blocks for a Linux system. It provides a system and service manager that runs as PID 1 and starts the rest of the system. systemd provides aggressive parallelization capabilities, uses socket and D-Bus activation for starting services, offers on-demand starting of daemons, keeps track of processes using Linux control groups, maintains mount and automount points, and implements an elaborate transactional dependency-based service control logic. systemd supports SysV and LSB init scripts and works as a replacement for sysvinit. Other parts include a logging daemon, utilities to control basic system configuration like the hostname, date, locale, maintain a list of logged-in users and running containers and virtual machines, system accounts, runtime directories and settings, and daemons to manage simple network configuration, network time synchronization, log forwarding, and name resolution.

Some unit names contain an "@" sign (e.g. name@string.service): this means that they are instances of a template unit, whose actual file name does not contain the string part (e.g. name@.service). string is called the instance identifier, and is similar to an argument that is passed to the template unit when called with the systemctl command: in the unit file it will substitute the "%i" specifier. To be more accurate, before trying to instantiate the name@.suffix template unit, systemd will actually look for a unit with the exact "name@string.suffix" file name, although by convention such a "clash" happens rarely, i.e. most unit files containing an "@" sign are meant to be templates. Also, if a template unit is called without an instance identifier, it will just fail, since the "%i" specifier cannot be substituted.

Unit files are loaded from multiple locations(listed from lowest to highest precedence):
/usr/lib/systemd/system/: units provided by installed packages
/etc/systemd/system/: units installed by the system administrator

With systemd, dependencies can be resolved by designing the unit files correctly. The most typical case is that the unit A requires the unit B to be running before A is started. In that case add Requires=B and After=B to the [Unit] section of A. If the dependency is optional, add Wants=B and After=B instead. Note that Wants= and Requires= do not imply After=, meaning that if After= is not specified, the two units will be started in parallel.

Service types:
1.Type=simple (default): systemd considers the service to be started up immediately. The process must not fork. Do not use this type if other services need to be ordered on this service, unless it is socket activated.
2.Type=forking: systemd considers the service started up once the process forks and the parent has exited. For classic daemons use this type unless you know that it is not necessary. You should specify PIDFile= as well so systemd can keep track of the main process.
3.Type=oneshot: this is useful for scripts that do a single job and then exit. You may want to set RemainAfterExit=yes as well so that systemd still considers the service as active after the process has exited.
4.Type=notify: identical to Type=simple, but with the stipulation that the daemon will send a signal to systemd when it is ready. The reference implementation for this notification is provided by libsystemd-daemon.so.
5.Type=dbus: the service is considered ready when the specified BusName appears on DBus's system bus.
6.Type=idle: systemd will delay execution of the service binary until all jobs are dispatched. Other than that behavior is very similar to Type=simple.
-------------------------------------------------------------------
Absolute minimum systemd service unit:

/etc/systemd/system/servicename.service

[Unit]
After=mysql.service                             # After: Instructs systemd on when the script should be run. Other example could be network.target

[Service]
ExecStart=/usr/local/bin/disk-space-check.sh    # ExecStart: This field provides a full path the actual script to be execute

[Install]
WantedBy=default.target                         # WantedBy: Into what boot target the systemd unit should be installed

===============================================================================================
systemd/User:
systemd offers users the ability to manage services under the user's control with a per-user systemd instance, enabling users to start, stop, enable, and disable their own units.
As per default configuration in /etc/pam.d/system-login, the pam_systemd module automatically launches a systemd --user instance when the user logs in for the first time. This process will survive as long as there is some session for that user, and will be killed as soon as the last session for the user is closed.

Be aware that the systemd --user instance is a per-user process, and not per-session. The rationale is that most resources handled by user services, like sockets or state files will be per-user (live on the user's home dir) and not per session. This means that all user services run outside of a session. As a consequence, programs that need to be run inside a session will probably break in user services.

"systemd --user" runs as a separate process from the "systemd --system process". User units can not reference or depend on system units.

Similarly to system units, user units are located in the following directories (ordered by ascending precedence):
/usr/lib/systemd/user/ where units provided by installed packages belong.
~/.local/share/systemd/user/ where units of packages that have been installed in the home directory belong.
/etc/systemd/user/ where system-wide user units are placed by the system administrator.
~/.config/systemd/user/ where the user puts their own units.

The user instance of systemd does not inherit any of the environment variables set in places like .bashrc etc. There are several ways to set environment variables for the systemd user instance:
1.For users with a $HOME directory, create a .conf file in the ~/.config/environment.d/ directory with lines of the form NAME=VAL. Affects only that user's user unit. See environment.d(5) for more information.
2.Use the DefaultEnvironment option in /etc/systemd/user.conf file. Affects all user units.
3.Add a drop-in config file in /etc/systemd/system/user@.service.d/. Affects all user units; see #Service example
4.At any time, use "systemctl --user set-environment" or "systemctl --user import-environment". Affects all user units started after setting the environment variables, but not the units that were already running.
5.Using the "dbus-update-activation-environment --systemd --all" command provided by dbus. Has the same effect as "systemctl --user import-environment", but also affects the D-Bus session. You can add this to the end of your shell initialization file.
6.For "global" environment variables for the user environment you can use the environment.d directories which are parsed by systemd generators. See environment.d(5) for more information.
7.You can also write an environment generator script which can produce environment variables that vary from user to user, this is probably the best way if you need per-user environments (this is the case for XDG_RUNTIME_DIR, DBUS_SESSION_BUS_ADDRESS, etc). See systemd.environment-generator(7).

After configuration, the command "systemctl --user show-environment" can be used to verify that the values are correct.
------------------------------------------------------------------------------
The following is an example of a user version of the mpd service:

~/.config/systemd/user/mpd.service

[Unit]
Description=Music Player Daemon

[Service]
ExecStart=/usr/bin/mpd --no-daemon

[Install]
WantedBy=default.target
--------------------------------------------------------------
Example with variables:

~/.config/systemd/user/sickbeard.service

[Unit]
Description=SickBeard Daemon

[Service]
ExecStart=/usr/bin/env python2 /opt/sickbeard/SickBeard.py --config %h/.sickbeard/config.ini --datadir %h/.sickbeard

[Install]
WantedBy=default.target

