Linux boot order(In General):
1.Boot loader - piece of software started by the BIOS or UEFI. It is responsible for loading the kernel with the wanted kernel parameters,
and initial RAM disk based on configuration files.
2.Kernel - core of an operating system. It functions on a low level (kernelspace) interacting between the hardware of the machine and the programs 
which use the hardware to run.
3.initramfs - after the boot loader loads the kernel and possible initramfs files and executes the kernel, the kernel unpacks the initramfs
(initial RAM filesystem) archives into the (then empty) rootfs (initial root filesystem, specifically a ramfs or tmpfs).
The first extracted initramfs is the one embedded in the kernel binary during the kernel build, then possible external initramfs files are extracted.
Thus files in the external initramfs overwrite files with the same name in the embedded initramfs.
The kernel then executes /init (in the rootfs) as the first process. The early userspace starts.
The purpose of the initramfs is to bootstrap the system to the point where it can access the root filesystem.
4.init process(systemd) - at the final stage of early userspace, the real root is mounted, and then replaces the initial root filesystem. /sbin/init is executed,
replacing the /init process.
5.getty - init calls getty once for each virtual terminal (typically six of them), which initializes each tty and asks for a username and password.
Once the username and password are provided, getty checks them against /etc/passwd and /etc/shadow, then calls login.
Alternatively, getty may start a display manager if one is present on the system.
6.Display manager(lightdm) - can be configured to replace the getty login prompt on a tty, in order to automatically initialize a display manager after booting,
it is necessary to manually enable the service unit through systemd(or other init system).
7.Login - login program begins a session for the user by setting environment variables and starting the user's shell, based on /etc/passwd.
8.Shell - once the user's shell is started, it will typically run a runtime configuration file, such as bashrc, before presenting a prompt to the user.
If the account is configured to Start X at login, the runtime configuration file will call startx or xinit.
9.GUI - xinit runs the user's xinitrc runtime configuration file, which normally starts a window manager. When the user is finished and exits the window manager,
xinit, startx, the shell, and login will terminate in that order, returning to getty. 

initramfs(initial RAM filesystem) - the initial root filesystem, bootstrap the system to the point where it can access the real root filesystem.

Init - first process started during system boot and continues running until the system is shut down. Started by the kernel using a hard-coded filename.
Init is the direct or indirect ancestor of all other processes, and automatically adopts all orphaned processes.

Processes - running instance of a program, also called a task. Each process is given a unique number: a process identification number (PID).
When a process is running, it can spawn other processes. This is accomplished through the 'fork' system call.
When a process spawns a new process, it first duplicates itself, which then transforms into the new process, which can also create new processes.
Every process consists of: system resources that are allocated to it, section of memory, security attributes, such as its owner and its set of permissions
and the processor state(processor state includes the contents of its registers and their physical memory addresses).
Each process is started with a single thread, often called the primary thread, but can create additional threads from any of its threads.

Thread - entity within a process that can be scheduled for execution
Threads exist within processes and share that processes virtual address space and resources.
Threads have unique properties: exception handlers, scheduling priority, thread local storage, unique identifier and set of structures the system can use to save the thread context.
Thread is different from processes in that threads run in shared memory space, whereas processes run in their own separate memory spaces.

daemons - special class of processes that run exclusively in the background. daemons are usually launched automatically and stay in the background
until their services are required.

OOM Killer - Out Of Memory Killer is a process that the linux kernel employs when the system is critically low on memory.
OOM Killer works by reviewing all running processes and assigning them a badness score. The process that has the highest score is the one that is killed.
It will choose a process using lots of memory and has lots of child processes and which are not system processes.
The primary goal is to kill the least number of processes that minimizes the damage done and at the same time maximizing the amount of memory freed.
If it's invoked it will write a great deal of information to the system log including which process was killed and why.
/proc/<pid>/oom_score (oom_score of each of the processes)

Inod - entry in inode table, containing information. Linux extended filesystems such as ext2 or ext3/ext4 maintain an array of these inodes: the inode table. This table contains list of all files in that filesystem. The individual inodes in inode table have a unique number (unique to that filesystem), the inode number.
Inod contains all of the fileâ€™s metadata: list of all the blocks in which a file is stored, the owner information for that file, permissions and all other
attributes, etc... 

socket - has two meanings. the first refers to a socket in the sense of the third layer of the IPS (internet protocol suite).
The second is a Unix Domain Socket, or Inter-Process Communication socket (IPC socket).
IPC sockets underlay a system for exchanging data between processes on the same host operating system. Like TCP, but without connecting to another computer.
In the case of IPC sockets, the stream of bytes is called the SOCK_STREAM, which consist of a reliable and ordered transmission of datagrams (SOCK_SEQPACKET,
cf TCP), or an unreliable and unordered transmission (SOCK_DGRAM, cf UDP).
IPC sockets, like everything else on unix, are files, and so two processes can send information to the same socket through the use of inodes.

LVM(logical volume manager) - manages disk drives and similar mass-storage devices.
You can think of LVM as "dynamic partitions", meaning that you can create/resize/delete LVM "partitions"
(they're called "Logical Volumes" in LVM-speak) from the command line while your Linux system is running.
If you use LVM across hard drives, you may lose all your data when only one drive fails.
Features that LVM provide:
1.If you have more than one hard-disk, LVM can extend over more than one disk, they are not limited by the size of one single disk,
rather by the total aggregate size.
2.You can set up "striped" LVs, so that I/O can be distributed to all disks hosting the LV in parallel(Similar to RAID-0, but a bit easier to set-up).
3.You can create a (read-only) snapshot of any LV. You can revert the original LV to the snapshot at a later time,
or delete the snapshot if you no longer need it. This is handy for server backups or to provide a "safety net" before a critical system upgrade.

D-Bus - message bus system that provides an easy way for inter-process communication.

FUSE - Filesystem in Userspace, is a software interface for Unix and Unix-like computer operating systems that lets non-privileged users create their own file systems without editing kernel code. This is achieved by running file system code in user space while the FUSE module provides only a "bridge" to the actual kernel interfaces.
bindfs is a FUSE filesystem for mounting a directory to another location.

tmpfs - temporary filesystem that resides in memory and/or swap partition(s).

CUPS - standards-based, open source printing system.
--------------------------------------------------------------------------------------------------------------------------------------
System Calls:
Fork(): it is used to create a new process
Exec(): it is used to execute a new process
Wait(): it is used to make the process to wait
Exit(): it is used to exit or terminate the process
Getpid(): it is used to find the unique process ID
Getppid(): it is used to check the parent process ID
Nice(): it is used to bias the currently running process property
chmod(): change the access permissions of file system objects
-----------------------------------------------------------------------------------
GRUB(GRand Unified Bootloader) is a multi-boot loader.
/boot/grub/grub.cfg
/etc/default/grub
update-grub (update-grub is a stub for running 'grub-mkconfig -o /boot/grub/grub.cfg "$@"' to generate a grub2 config file), alternatively:
grub2-mkconfig -o "$(readlink -e /etc/grub2.conf)"  (can be /etc/grub2.cfg, or /etc/grub2-efi.cfg)

Single-user mode: 
'Shift' or 'Esc' key while rebooting to bring up GRUB menu
Select the GRUB boot menu entry you wish to use, then press 'e' to edit the GRUB boot commands for the selected boot menu entry
Add the kernel boot parameter 'single' to the end of the root mount line, you could also change 'ro' to 'rw' so the file system gets mounted writable
'Ctrl+X' or 'F10' to boot using these kernel options.
Could also try to type boot -s at the Boot: prompt.
If you might not be able to use the single method, then use a different init like that: 'rw init=/bin/bash'

Kernel - computer program that is the core of a computer's operating system, with complete control over everything in the system. Linux have a monolithic kernel, although its functionalities can be included statically or built and loaded as separate modules, it always runs as a "single piece" in the same address space.
Package manager Kernel files: linux-headers-xxx linux-headers-xxx-generic linux-image-xxx-generic linux-modules-xxx-generic linux-modules-extra-xxx-generic
/etc/sysctl.conf (config file that can be used for setting kernel parameters, run 'sysctl -p' to make the changes permanently without rebooting)

Kernel module - pieces of code that can be loaded and unloaded into the kernel upon demand. A module can be configured as built-in or loadable. To dynamically load or remove a module, it has to be configured as a loadable module in the kernel configuration. 
/lib/modules/kernel_release     (stored Modules)
/etc/modules-load.d             (Kernel modules explicitly loaded during boot)
/proc/modules                   (loaded module list)
/etc/modprobe.d/                (directory can be used to pass module settings to udev)
/etc/modprobe.d/                (Can be used for Blacklisting)
(find /lib/modules/$(uname -r) -type f -name '*.ko*')

/proc - pseudo-filesystem which provides an interface to kernel data structures. Most of it is read-only, but some files allow kernel variables to be changed. 
You can also look directly at /proc/<pid>/exe, which may be a symlink to the appropriate executable. 
All, in all, the files in /proc will provide all information about a program:
'exe' will be a link to executable.
'environ' contains  the  environment  for  the process.
'cwd' to current working directory. 
'fd' directory contains links to currently open files(file descriptors) (including standard input, output and error).
'fdinfo' contains one file corresponding to each open file, which tells you the current position for reading or writing.
'io' contains I/O statistics for the process
'self' when a process accesses this magic symbolic link, it resolves to the process's own /proc/[pid] directory
'task/[tid]' contain corresponding information about each of the threads in the process
'status' different process info: state, PPid, number of Threads.
/proc/sys/ (system configuration information and interfaces)

namespaces - partitions kernel resources such that one set of processes sees one set of resources while another set of processes sees a different set of resources.
Makes it appear to the processes within the namespace that they have their own isolated instance of the global resource. 
Changes to  the  global resource  are  visible  to  other processes that are members of the namespace, but are invisible to other processes.
Namespaces do not restrict access to physical resources such as CPU, memory and disk. That access is metered and restricted by a kernel â€˜cgroupsâ€™.
Each process is associated with a namespace and can only see or use the resources associated with that namespace, and descendant namespaces where applicable.
This way each process (or process group thereof) can have a unique view on the resources.
Which resource is isolated depends on the kind of namespace that has been created for a given process group. There are 7 kinds of namespaces:
    Mount - isolate filesystem mount points
    UTS - isolate hostname and domainname, allow a single system to appear to have different host and domain names to different processes.
    IPC - isolate interprocess communication (IPC) resources
    PID - isolate the PID number space, provides processes with an independent set of process IDs (PIDs) from other namespaces.
    Network - isolate network interfaces, it will have a private set of IP addresses, routing table, socket listing, connection tracking table, etc...
    User - isolate UID/GID number spaces
    Cgroup - isolate cgroup root directory, hides the identity of the control group of which process is a member.
/proc/[pid]/ns/* (process nemespaces, uniquely identifies each namespace by the inode number pointed to by one of its symlinks)
/proc/[pid]/task/[tid]/ns/* (process threads nemespaces)
/proc/[pid]/mounts (lists all the filesystems currently mounted in the process's mount namespace)
/proc/[pid]/mountstats (exports information (statistics, configuration information) about the mount points in the process's mount namespace)

cgroups(control groups) - Linux kernel feature to limit, police and account the resource usage for a set of processes. Compared to other approaches like the 'nice' command or /etc/security/limits.conf, cgroups are more flexible as they can operate on (sub)sets of processes (possibly with different system users)
These groups can be hierarchical, meaning that each group inherits limits from its parent group.
memory" controller limits memory use, "cpuacct" accounts CPU usage
/sys/fs/cgroup/xxx (cgroups lists)
/sys/fs/cgroup/memory/memory.oom_control: (OOM Killer notification and other controls)
/proc/[pid]/cgroup (process cgroups membership)
/proc/[pid]/task/[tid]/cgroup (process threads cgroups membership)
# If enabled (oom_kill_disable 0), tasks that attempt to consume more memory than they are allowed, will be immediately killed by the OOM killer.
# When the OOM killer is disabled, tasks that attempt to use more memory than they are allowed, will be paused until additional memory is freed.
# under_oom entry reports the value 1 If the cgroup is out of memory and tasks in it are paused.

udev - device manager for the Linux kernel.
udev can be used to set up static device names, perform some action on a specific disk device, wake up functionality of a suspend USB device or disabling the wakeup functionality, etc...
/etc/udev/rules.d/ (udev rules written by the administrator)

Process Priority and Nice value:
Nice(NI) value is a user-space and priority(PR) is the process's actual priority that use by Linux kernel.
PR -- Priority. The scheduling priority of the task. If you see 'rt' in this field, it means the task is running under 'real time' scheduling priority.
NI -- Nice Value. The nice value of the task. A negative nice value means higher priority, whereas a positive nice value means lower priority.
PR = 20 + NI
NI value is just a suggestion to kernel, kernel sometimes ignore it.
Priorities range from 0 to 139 in which 0 to 99 for real time and 100 to 139 for users.
Nice value range is -20 to +19 where -20 is highest, 0 default and +19 is lowest.

Global and User system environment settings files:
~/.profile
~/.bashrc (only for command line shell)
~/.zshrc (only for command line shell)
~/.pam_environment (first thing the system reads at user login)
/etc/bashrc (only for command line shell)
/etc/profile
/etc/login.defs (used by pam for umask default value)

Access Control List(ACL) - more flexible permission mechanism for file permissions.
tune2fs -l /dev/sdXY | grep "Default mount options:" (check if enable for current drives)
/etc/mke2fs.conf  (default mount options)
getfacl <file/dir> (show permissions)
setfacl -m "u:user:permissions" <file/dir> (add permissions for a user)
setfacl -m "g:group:permissions" <file/dir> (add permissions for a group)
setfacl -dm "entry" <dir> (newly created files or directories will inherit entries from the parent director)
setfacl -x "entry" <file/dir> (remove a specific entry)
setfacl -b <file/dir> (remove all entries)

rsyslog - syslog implementation that offers many benefits. It can be configured to receive log entries from systemd's journal
in order to process or filter them before quickly writing them to disk or sending them over network.
/etc/rsyslog.conf
/etc/rsyslog.d/50-default.conf  (Default rules for rsyslog)
/etc/rsyslog.d/custom.conf (you can add custom conf files for creating additional log files)
logrotate - allows for the automatic rotation compression, removal and mailing of log files.
/etc/logrotate.conf
/etc/logrotate.d/mylogconf

Cron - time-based job scheduler in Unix-like computer operating systems.
/etc/crontab (system-wide cron config)
/etc/cron.d (folder for system-wide cron jobs)
/etc/cron.hourly(cron.daily, cron.weekly, cron.monthly) (system-wide jobs used by anacron)
/etc/cron.allow (cron user whitelist)
/etc/cron.deny (cron user blacklist(better to use whitelist))
/var/spool/cron/crontabs (place where kept users cron jobs)
min(0-59) hour(0-23) dom(1-31) month(1-12) dow(0-6 or 1-7)
*/30 * * * * user /path/to/script (every half hour)
0 8,10,12,14 * * * user /path/to/script (every day at 8am, 10am, 12am, 2pm)
0 8 * * 2 user /path/to/script (every Tuesday at 8am)
0 23 1-7 * 3 user /path/to/script (first Wednesday of each month at 11pm)

Core dump - file containing a process's address space (memory) when the process terminates unexpectedly, may be produced on-demand, or automatically upon termination. Triggered by the kernel in response to program crashes, and may be passed to a helper program (such as systemd-coredump) for further processing.
cat /proc/sys/kernel/core_pattern  (where automatic core dumps go)
/var/lib/systemd/coredump (possible core dumps location)

Network configuration:
/sys/class/net (kernel network interfaces info)
/etc/network/interfaces (network interfaces configuration)
/etc/sysconfig/network-scripts/<interface> (CentOS and FreeBSD)
/etc/netplan/01-netcfg.yaml or 50-cloud-init.yaml (for ubuntu v.18.04+)
# If there is no file, generate it with "netplan generate", use "netplan apply" to apply recent changes.
# To go back to /network/interfaces file use "install ifupdown", and disable systemd-networkd.socket, instead enable "networking" service.
/proc/sys/net/ipv4/ip_forward (current state of IP forwarding)
echo 0(1) > /proc/sys/net/ipv4/ip_forward (temporary disable/enable the IP forwarding)
/etc/sysctl.conf:
net.ipv4.ip_forward=1 (permanently disable/enable the IP forwarding)
net.ipv4.tcp_tw_recycle = 1 (append to disable/enable fast recycle of sockets in TIME_WAIT state, can cause problems)
net.ipv4.tcp_tw_reuse = 1 (append to disable/enable reuse of sockets in TIME_WAIT state, can cause problems)
# TIME-WAIT - represents waiting for enough time to pass to be sure the remote TCP received the acknowledgment of its connection termination request.
/proc/sys/net/ipv4/ip_local_port_range (available ports range from unreserved source ports, default is 32768 to 61000)

conntrack - connection tracking or flow analysis.
'Cannot alloc conntrack' means that the attempt to allocate memory to track a new network connection failed.
Connections can mean a lot more than TCP connections. ICMP, SIP, and UDP can all count towards your limits.
connection tracking system stores information about the state of a connection in a memory structure that contains the source and destination IP addresses,
port number pairs, protocol types, state, and timeout.
Each new connection goes onto a connection tracking table which has a limited number of entries.
If and when that connection table fills up, the oldest entry is dropped.
This means that old connections may suddenly disconnect if too many connections are established.
sysctl -w net.netfilter.nf_conntrack_max=65535 (change max number of possible connection tracking)
/proc/sys/net/netfilter/nf_conntrack_max (maximum number of possible connection tracking)
/proc/sys/net/netfilter/nf_conntrack_count (current count of connection tracking)

DHCP - Dynamic Host Configuration Protocol
/etc/dhcp/dhcpd.conf (dhcp server config)

DNS - Domain Name System
/etc/hosts (known hosts)
/etc/resolv.conf
/etc/resolvconf/resolv.conf.d/head (File to be prepended to the dynamically generated resolver)
/etc/resolvconf/resolv.conf.d/tail (File to be appended to the dynamically generated resolver)
resolvconf -u (should be run after changes to /resolv.conf.d/head or tail)
/etc/dnsmasq.conf

NetworkManager - program for providing detection and configuration for systems to automatically connect to networks.
/etc/NetworkManager/system-connections/* (Stored Connections file)
nmcli connection reload (should be run after changes to connection config file)
/etc/NetworkManager/NetworkManager.conf (global configuration file, can be used to set DNS)
/etc/NetworkManager/dispatcher.d/

Samba - re-implementation of the SMB networking protocol.
/etc/samba/smb.conf (Samba configuration file)

PAM - Pluggable Authentication Modules, provide a framework for system-wide user authentication.
PAM provides a way to develop programs that are independent of authentication scheme. 
These programs need "authentication modules" to be attached to them at run-time in order to work. 
Which authentication module is to be attached is dependent upon the local system setup and is at the discretion of the local system administrator.
PAM is dynamically linked at runtime, login application is pam-aware and must, therefore, have a policy.
/etc/security (contains system-specific configuration for variables the authentication methods offer)
/etc/pam.d/ (PAM configuration to link the applications to the individual systems' authentication schemes)
/etc/pam.d/common-password (password related modules in which hashing algorithm can be set)

SSH - secure shell, an encrypted protocol used to administer and communicate with servers.
etc/ssh/sshd_config (config for ssh server)
~/.ssh/authorized_keys (in that file, public key needs to be concatenated on remote server)
ssh-keygen -t rsa -b 4096 (create 4096-bit RSA key pair, default is 2048-bit)
ssh-agent - program which caches your decrypted private keys and provides them to SSH client programs on your behalf.
eval $(ssh-agent)
ssh-add ~/.ssh/id_rsa (add key to ssh-agent cache)
SSH_AUTH_SOCK=0 (to temporary solve problem with gnome-keyring)

MTP - Media Transfer Protocol
If you use gvfs, then mtp devices can be found under:
/run/user/$UID/gvfs/mtp* or /var/run/user/$UID/gvfs/
For manual detect and connect tools like mtp-tools, mtpfs and libmtp needed:
mtp-detect (detect your device)
mtp-connect (connect to your mtp device)
mtp-folders (contained folders and their IDs)
mtp-files (files in your device and their IDs)
mtp-getfile "File ID" "Parent ID"/filename (copy a file from the device to your computer("Parent ID" - folder where the file resides))
mtp-sendfile (sending a file from your computer to your device)

GnuPG - allows you to encrypt and sign your data and communication.
addgnupghome user1 user2 (GnuPG home directories for existing users)
gpg --gen-key  (Generate a key pair)
gpg --list-keys  (list keys in your public key ring)
gpg --list-secret-keys (list keys in your secret key ring)
gpg --recipient user-id --encrypt file (encrypt a file using key)
gpg -c file (encrypt data with a passphrase)
gpg --output doc --decrypt file.gpg (decrypt)

chroot - operation that changes the apparent root directory for the current running process and their children. A program that is run in such a modified environment cannot access files and commands outside that environmental directory tree.
A chroot is a way to isolate a process and its children from the rest of the system. It should only be used for processes that don't run as root, as root users can break out of the jail very easily.
Using a bind mounts is a great way to populate the chroot tree. Using that, you can pull in folders like /lib and /usr/lib while not pulling in /usr, for example. Just bind the directory trees you want to directories you create in chroot tree.
Uses:
Reinstalling the bootloader.
Rebuilding the initramfs image.
Upgrading or downgrading packages.
Resetting a forgotten password.
Isolating insecure and unstable applications.
To create a test environment.
Building packages in a clean chroot.

bind mount - mounting creates a view of a storage device as a directory tree. A bind mount instead takes an existing directory tree and replicates it under a different point. The directories and files in the bind mount are the same as the original. Any modification on one side is immediately reflected on the other side, since the two views show the same data.
A Linux bind mount is mostly indistinguishable from the original. The command df -T /else/where shows the same device and the same filesystem type as df -T /some/where. The files /some/where/foo and /else/where/foo are indistinguishable, as if they were hard links. It is possible to unmount /some/where, in which case /else/where remains mounted.
If there are mount points under /some/where, their contents are not visible under /else/where. Instead of bind, you can use rbind, also replicate mount points underneath /some/where.
In addition, Linux allows mounts to be declared as shared, slave, private or unbindable. This affects whether that mount operation is reflected under a bind mount that replicates the mount point.

LD_LIBRARY_PATH - Environment variable, colon-separated set of directories where libraries should be searched for first, before the standard set of directories.
This is useful when debugging a new library or using a nonstandard library for special purposes.


